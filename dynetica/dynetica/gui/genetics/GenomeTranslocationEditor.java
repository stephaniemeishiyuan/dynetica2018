/*
 * ProgressiveReactionEditor.java
 *
 * Created on April 10, 2001, 2:07 AM
 */

package dynetica.gui.genetics;

/**
 *
 * @author Lingchong You
 * @version 0.01
 */
import dynetica.system.*;

public class GenomeTranslocationEditor extends javax.swing.JPanel {

    dynetica.reaction.GenomeTranslocation reaction;

    /** Creates new customizer ProgressiveReactionEditor */
    public GenomeTranslocationEditor(dynetica.reaction.GenomeTranslocation r) {
        reaction = r;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        genomLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        genomeField = new javax.swing.JTextField();
        kineticsField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout(0, 1));

        jSplitPane1.setDividerLocation(100);
        jSplitPane1.setDividerSize(1);

        jPanel2.setLayout(new java.awt.GridLayout(1, 1, 2, 2));

        genomLabel.setPreferredSize(new java.awt.Dimension(130, 25));
        genomLabel.setMinimumSize(new java.awt.Dimension(100, 25));
        genomLabel.setText("Genome");
        genomLabel
                .setToolTipText("The (usually viral) genome that ungos translocation.");
        genomLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        genomLabel.setMaximumSize(new java.awt.Dimension(400, 25));
        jPanel2.add(genomLabel);

        jLabel3.setPreferredSize(new java.awt.Dimension(100, 25));
        jLabel3.setMinimumSize(new java.awt.Dimension(100, 25));
        jLabel3.setText("Kinetics");
        jLabel3.setToolTipText("The rate expression that describes the kinetics of this \nreaction. Follow the convention in writing down a \nmathematical expression.");
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setMaximumSize(new java.awt.Dimension(100, 25));
        jPanel2.add(jLabel3);

        jSplitPane1.setLeftComponent(jPanel2);

        jPanel3.setLayout(new java.awt.GridLayout(1, 1, 2, 2));

        genomeField.setPreferredSize(new java.awt.Dimension(120, 25));
        genomeField.setMaximumSize(new java.awt.Dimension(400, 25));
        genomeField.setText(getGenomeName());
        genomeField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        genomeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genomeFieldActionPerformed(evt);
            }
        });
        genomeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                genomeFieldFocusLost(evt);
            }
        });
        jPanel3.add(genomeField);

        kineticsField.setPreferredSize(new java.awt.Dimension(120, 25));
        kineticsField.setMaximumSize(new java.awt.Dimension(400, 25));
        kineticsField.setText(getKinetics());
        kineticsField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        kineticsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kineticsFieldActionPerformed(evt);
            }
        });
        kineticsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                kineticsFieldFocusLost(evt);
            }
        });
        jPanel3.add(kineticsField);

        jSplitPane1.setRightComponent(jPanel3);

        jScrollPane1.setViewportView(jSplitPane1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setPreferredSize(new java.awt.Dimension(220, 30));
        jLabel1.setMinimumSize(new java.awt.Dimension(220, 30));
        jLabel1.setText("<html> <i> GenomeTranslocation </i> "
                + reaction.getName());
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setMaximumSize(new java.awt.Dimension(220, 30));
        add(jLabel1, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void kineticsFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_kineticsFieldFocusLost
        setKinetics();
    }// GEN-LAST:event_kineticsFieldFocusLost

    private void genomeFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_genomeFieldFocusLost
        setGenomeName();
    }// GEN-LAST:event_genomeFieldFocusLost

    private void kineticsFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_kineticsFieldActionPerformed
        setKinetics();
    }// GEN-LAST:event_kineticsFieldActionPerformed

    private void genomeFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_genomeFieldActionPerformed
        setGenomeName();
    }// GEN-LAST:event_genomeFieldActionPerformed

    private String getGenomeName() {
        if (reaction.getGenome() != null)
            return reaction.getGenome().getName();
        else
            return "";
    }

    private String getKinetics() {
        if (reaction.getKinetics() != null)
            return reaction.getKinetics();
        else
            return "";
    }

    private void setGenomeName() {
        String genomeName = genomeField.getText().trim();
        String oldGenomeName = getGenomeName();
        if (genomeName.length() > 0 && oldGenomeName.compareTo(genomeName) != 0) {
            reaction.setGenome((Genome) (reaction.getSystem().get(genomeName)));
        }
    }

    private void setKinetics() {
        String oldKinetics = getKinetics();
        String kinetics = kineticsField.getText().trim();
        if (kinetics.length() > 0 && oldKinetics.compareTo(kinetics) != 0) {
            try {
                reaction.setKinetics(kinetics);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }

    private String getReactionName() {
        if (reaction.getName() != null)
            return reaction.getName();
        else
            return "";
    }

    /*
     * private void setName() { String oldName = reaction.getName(); String
     * newName = nameField.getText().trim(); if (newName.length() > 0 &&
     * oldName.compareTo(newName) != 0) { reaction.setName(newName); // // fire
     * a propertyChange Event so that the parent panel of this panel can //
     * respond accordingly. // firePropertyChange("EntityName", oldName,
     * newName); } }
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel genomLabel;
    private javax.swing.JTextField genomeField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField kineticsField;
    // End of variables declaration//GEN-END:variables

}
