/*
 * SourceEditor.java
 *
 * Created on May 14, 2005, 10:23 AM
 */

package dynetica.gui.systems;

import dynetica.system.*;
import java.io.*;
import javax.swing.undo.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.text.*;

/**
 * 
 * @author Lingchong You
 * @version 1.0 has yet to implement undo function.
 */
public class SourceEditor extends javax.swing.JPanel {
    ReactiveSystem system;
    File source;
    protected UndoManager undo = new UndoManager();
    UndoAction undoAction = new UndoAction();
    RedoAction redoAction = new RedoAction();

    boolean enableEdit = false; // No editing by default.

    /**
     * Creates new form SourceEditor
     */
    public SourceEditor(ReactiveSystem system) {
        this.system = system;
        source = system.getFile();
        initComponents();
        // undoButton.add(undoAction);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        lockBotton = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        sourceTextPane = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        saveButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        saveButton.setText("Save");
        saveButton
                .setToolTipText("Update the system and save to the input file.");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveButton);

        updateButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        updateButton.setText("Update");
        updateButton
                .setToolTipText("Update the system without saving the file.");
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(updateButton);

        resetButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        resetButton.setText("Reset");
        resetButton.setToolTipText("Reset the text from the system.");
        resetButton.setEnabled(false);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        jPanel1.add(resetButton);

        clearButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        clearButton.setText("Clear");
        clearButton.setEnabled(false);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        jPanel1.add(clearButton);

        lockBotton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        lockBotton.setText("Unlock");
        lockBotton
                .setToolTipText("For advanced users only. Unlock to edit the input file directly.");
        lockBotton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockBottonActionPerformed(evt);
            }
        });
        jPanel1.add(lockBotton);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        sourceTextPane.setEditable(false);
        sourceTextPane.setText(system.toString());
        sourceTextPane.setPreferredSize(new java.awt.Dimension(400, 300));
        jScrollPane1.setViewportView(sourceTextPane);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_updateButtonActionPerformed
        try {
            system.rebuild(sourceTextPane.getText());
            system.fireSystemStructureChange();
            system.setSaved(true);
        } catch (Exception e) {
            System.out.println(e);
        }
    }// GEN-LAST:event_updateButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resetButtonActionPerformed
        sourceTextPane.setText(system.toString());
    }// GEN-LAST:event_resetButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_clearButtonActionPerformed
        sourceTextPane.setText("");
    }// GEN-LAST:event_clearButtonActionPerformed

    private void lockBottonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_lockBottonActionPerformed
        enableEdit = lockBotton.isSelected();
        sourceTextPane.setEditable(enableEdit);
        saveButton.setEnabled(enableEdit);
        updateButton.setEnabled(enableEdit);
        resetButton.setEnabled(enableEdit);
        clearButton.setEnabled(enableEdit);
    }// GEN-LAST:event_lockBottonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
        try {
            PrintWriter out = new PrintWriter(new FileOutputStream(source));
            out.println(sourceTextPane.getText());
            out.close();
            system.rebuild();
            system.fireSystemStructureChange();
            system.setSaved(true);
        } catch (FileNotFoundException fnfe) {
            System.out.println(fnfe);
        }

    }// GEN-LAST:event_saveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox lockBotton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextPane sourceTextPane;
    private javax.swing.JButton updateButton;

    // End of variables declaration//GEN-END:variables

    public void resetText() {
        sourceTextPane.setText(system.toString());
    }

    protected class MyUndoableEditListener implements
            javax.swing.event.UndoableEditListener {
        public void undoableEditHappened(javax.swing.event.UndoableEditEvent e) {
            // Remember the edit and update the menus
            undo.addEdit(e.getEdit());
            undoAction.updateUndoState();
            redoAction.updateRedoState();
        }

    }

    class UndoAction extends AbstractAction {
        public UndoAction() {
            super("Undo");
            setEnabled(false);
        }

        public void actionPerformed(ActionEvent e) {
            try {
                undo.undo();
            } catch (CannotUndoException ex) {
                System.out.println("Unable to undo: " + ex);
                ex.printStackTrace();
            }
            updateUndoState();
            redoAction.updateRedoState();
        }

        protected void updateUndoState() {
            if (undo.canUndo()) {
                setEnabled(true);
                putValue(Action.NAME, undo.getUndoPresentationName());
            } else {
                setEnabled(false);
                putValue(Action.NAME, "Undo");
            }
        }
    }

    class RedoAction extends AbstractAction {
        public RedoAction() {
            super("Redo");
            setEnabled(false);
        }

        public void actionPerformed(ActionEvent e) {
            try {
                undo.redo();
            } catch (CannotRedoException ex) {
                System.out.println("Unable to redo: " + ex);
                ex.printStackTrace();
            }
            updateRedoState();
            undoAction.updateUndoState();
        }

        protected void updateRedoState() {
            if (undo.canRedo()) {
                setEnabled(true);
                putValue(Action.NAME, undo.getRedoPresentationName());
            } else {
                setEnabled(false);
                putValue(Action.NAME, "Redo");
            }
        }
    }

    // And this one listens for any changes to the document.
    protected class MyDocumentListener implements DocumentListener {
        public void insertUpdate(DocumentEvent e) {
            displayEditInfo(e);
        }

        public void removeUpdate(DocumentEvent e) {
            displayEditInfo(e);
        }

        public void changedUpdate(DocumentEvent e) {
            displayEditInfo(e);
        }

        private void displayEditInfo(DocumentEvent e) {
            // do nothing
        }
    }

}
