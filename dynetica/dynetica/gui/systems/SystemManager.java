/*
 * SystemManager.java
 *
 * Created on April 17, 2001, 12:30 AM
 * updated 4/20/2005 by LY
 */

package dynetica.gui.systems;

import dynetica.gui.algorithms.BottleNeckEditor;
import dynetica.gui.algorithms.NoiseOptimizationEditor;
import dynetica.gui.algorithms.ParameterSearchGeneticEditor;
import dynetica.gui.algorithms.ParameterSearchMonteCarloEditor;
import dynetica.gui.algorithms.ParameterSearchMultiSubstanceEditor;
import dynetica.gui.algorithms.BasicSensitivityAnalysisEditor;
import dynetica.gui.algorithms.MultiParameterSensitivityAnalysisEditor;
import java.util.*;
import dynetica.system.*;
import dynetica.algorithm.*;
import dynetica.util.*;
import java.io.*;
import javax.swing.*;
import java.awt.Toolkit;
import dynetica.event.*;
import dynetica.gui.plotting.*;
import dynetica.gui.AboutDyneticaFrame;
import dynetica.gui.ApplicationFrame;
import dynetica.gui.entities.FunctionEditor;

/**
 * 
 * @author Lingchong You
 * @version 1.2
 */
public class SystemManager extends javax.swing.JFrame {

    List openedSystems = new ArrayList();
    List algorithms = new ArrayList();
    ReactiveSystem currentSystem = null;
    Algorithm currentAlgorithm = new RungeKutta4();
    String workDir;
    javax.swing.DefaultComboBoxModel algorithmBoxModel = new javax.swing.DefaultComboBoxModel();
    SystemStateChangeListener systemListener;

    /** Creates new form SystemManager */
    public SystemManager(String workDir) {
        super("Dynetica" + DyneticaProperties.VERSION);
        this.workDir = workDir;
        buildAlgorithmBoxModel();
        initComponents();
        setJMenuBar(menuBar);
        toolBarPanel.setVisible(true);
        fileToolBar.setVisible(true);
        simulationToolBar.setVisible(true);
        setSize(600, 500);
    }

    private void buildAlgorithmBoxModel() {
        String[] algorithmNames = { "RungeKutta4", "RungeKuttaFehlberg",
                "DirectMethod", "OptimizedDirectMethod", "FirstReactionMethod",
                "SDE" };

        for (int i = 0; i < algorithmNames.length; i++) {
            algorithmBoxModel.addElement(algorithmNames[i]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenu();
        newRSMenu = new javax.swing.JMenuItem();
        newGSMenu = new javax.swing.JMenuItem();
        openMenu = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        saveAsItem = new javax.swing.JMenuItem();
        closeItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        renameItem = new javax.swing.JMenuItem();
        annotateItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        showFileToolBarItem = new javax.swing.JCheckBoxMenuItem();
        showSimToolBarItem = new javax.swing.JCheckBoxMenuItem();
        lookAndFeelMenu = new javax.swing.JMenu();
        winLF = new javax.swing.JMenuItem();
        swingLF = new javax.swing.JMenuItem();
        motifLF = new javax.swing.JMenuItem();
        macLF = new javax.swing.JMenuItem();
        simMenu = new javax.swing.JMenu();
        algorithmMenu = new javax.swing.JMenu();
        rungeKutta4Item = new javax.swing.JMenuItem();
        vRungeKutta4Item = new javax.swing.JMenuItem();
        directMethodItem = new javax.swing.JMenuItem();
        optimizedDirectItem = new javax.swing.JMenuItem();
        firstReactionMethodItem = new javax.swing.JMenuItem();
        sdeItem = new javax.swing.JMenuItem();
        startItem = new javax.swing.JMenuItem();
        pauseItem = new javax.swing.JMenuItem();
        resumeItem = new javax.swing.JMenuItem();
        plotItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        basicSAItem = new javax.swing.JMenuItem();
        psaItem = new javax.swing.JMenuItem();
        mpsItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        bssaMenuItem = new javax.swing.JMenuItem();
        rssItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        psmcItem = new javax.swing.JMenuItem();
        noiseItem = new javax.swing.JMenuItem();
        psMultiSubstanceItem = new javax.swing.JMenuItem();
        bottleneckItem = new javax.swing.JMenuItem();
        psGeneticItem = new javax.swing.JMenuItem();
        mathMenu = new javax.swing.JMenu();
        viewDAE = new javax.swing.JMenuItem();
        editMath = new javax.swing.JMenuItem();
        viewMATLAB = new javax.swing.JMenuItem();
        viewMatlabStochastic = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();
        toolBarPanel = new javax.swing.JPanel();
        fileToolBar = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        renameButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        saveAsButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        simulationToolBar = new javax.swing.JToolBar();
        startButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        resumeButton = new javax.swing.JButton();
        plotButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        algorithmBox = new javax.swing.JComboBox();
        systemPane = new javax.swing.JTabbedPane();

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N

        newMenu.setText("New");
        newMenu.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N

        newRSMenu.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        newRSMenu.setText("ReactiveSystem");
        newRSMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRSystemMenuActionPerformed(evt);
            }
        });
        newMenu.add(newRSMenu);

        newGSMenu.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        newGSMenu.setText("GeneticSystem");
        newGSMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGSMenuActionPerformed(evt);
            }
        });
        newMenu.add(newGSMenu);

        fileMenu.add(newMenu);

        openMenu.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        saveItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        saveItem.setText("Save");
        saveItem.setName("Save"); // NOI18N
        saveItem.setEnabled(false);
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        saveAsItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        saveAsItem.setText("Save As");
        saveAsItem.setEnabled(false);
        saveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsItem);

        closeItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        closeItem.setText("Close");
        closeItem.setEnabled(false);
        closeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeItem);

        exitItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('E');
        editMenu.setText("Edit");
        editMenu.setEnabled(false);
        editMenu.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N

        renameItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        renameItem.setText("Rename Current System");
        renameItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameItemActionPerformed(evt);
            }
        });
        editMenu.add(renameItem);

        annotateItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        annotateItem.setText("Annotation");
        annotateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotateItemActionPerformed(evt);
            }
        });
        editMenu.add(annotateItem);

        menuBar.add(editMenu);

        viewMenu.setMnemonic('V');
        viewMenu.setText("View");
        viewMenu.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N

        showFileToolBarItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        showFileToolBarItem.setSelected(true);
        showFileToolBarItem.setText("Show File Bar");
        showFileToolBarItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        showFileToolBarItemActionPerformed(evt);
                    }
                });
        viewMenu.add(showFileToolBarItem);

        showSimToolBarItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        showSimToolBarItem.setSelected(true);
        showSimToolBarItem.setText("Show Simulation Bar");
        showSimToolBarItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        showSimToolBarItemActionPerformed(evt);
                    }
                });
        viewMenu.add(showSimToolBarItem);

        lookAndFeelMenu.setText("Look&Feel");
        lookAndFeelMenu.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N

        winLF.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        winLF.setText("Windows");
        winLF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                winLFActionPerformed(evt);
            }
        });
        lookAndFeelMenu.add(winLF);

        swingLF.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        swingLF.setText("Swing");
        swingLF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swingLFActionPerformed(evt);
            }
        });
        lookAndFeelMenu.add(swingLF);

        motifLF.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        motifLF.setText("Motif");
        motifLF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motifLFActionPerformed(evt);
            }
        });
        lookAndFeelMenu.add(motifLF);

        macLF.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        macLF.setText("Mac");
        macLF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                macLFActionPerformed(evt);
            }
        });
        lookAndFeelMenu.add(macLF);

        viewMenu.add(lookAndFeelMenu);

        menuBar.add(viewMenu);

        simMenu.setMnemonic('S');
        simMenu.setText("Simulation");
        simMenu.setEnabled(false);
        simMenu.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N

        algorithmMenu.setText("Algorithm");
        algorithmMenu.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N

        rungeKutta4Item.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        rungeKutta4Item.setText("Runge Kutta");
        rungeKutta4Item.setToolTipText("Fixed Time-step 4th Order Runge Kutta");
        rungeKutta4Item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rungeKutta4ItemActionPerformed(evt);
            }
        });
        algorithmMenu.add(rungeKutta4Item);

        vRungeKutta4Item.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        vRungeKutta4Item.setText("Variable Time-Step Runge-Kutta");
        vRungeKutta4Item
                .setToolTipText("Variable Time-Step 4th Order Runge-Kutta Algorithm");
        vRungeKutta4Item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vRungeKutta4ItemActionPerformed(evt);
            }
        });
        algorithmMenu.add(vRungeKutta4Item);

        directMethodItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        directMethodItem.setText("Gillespie Direct Method");
        directMethodItem
                .setToolTipText("Stochastic Algorithm (Gillespie's Algorithm)");
        directMethodItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directMethodItemActionPerformed(evt);
            }
        });
        algorithmMenu.add(directMethodItem);

        optimizedDirectItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        optimizedDirectItem.setText("Optimizded Direct Method");
        optimizedDirectItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        optimizedDirectItemActionPerformed(evt);
                    }
                });
        algorithmMenu.add(optimizedDirectItem);

        firstReactionMethodItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        firstReactionMethodItem.setText("Gellispie First Reaction Method");
        firstReactionMethodItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        firstReactionMethodItemActionPerformed(evt);
                    }
                });
        algorithmMenu.add(firstReactionMethodItem);

        sdeItem.setText("Item");
        sdeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sdeItemActionPerformed(evt);
            }
        });
        algorithmMenu.add(sdeItem);

        simMenu.add(algorithmMenu);

        startItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        startItem.setText("Start");
        startItem.setEnabled(false);
        startItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startItemActionPerformed(evt);
            }
        });
        simMenu.add(startItem);

        pauseItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        pauseItem.setText("Pause");
        pauseItem.setEnabled(false);
        pauseItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseItemActionPerformed(evt);
            }
        });
        simMenu.add(pauseItem);

        resumeItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        resumeItem.setText("Resume");
        resumeItem.setEnabled(false);
        resumeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeItemActionPerformed(evt);
            }
        });
        simMenu.add(resumeItem);

        plotItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        plotItem.setText("Plot");
        plotItem.setEnabled(false);
        plotItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotItemActionPerformed(evt);
            }
        });
        simMenu.add(plotItem);
        simMenu.add(jSeparator1);

        basicSAItem.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        basicSAItem.setText("Basic Sensitivity Analysis");
        basicSAItem
                .setToolTipText("Analyzing sensitivity of different substances on a given variable (parameter or substance).\nAlso allows plotting of multiple time courses for different variable values.");
        basicSAItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basicSAItemActionPerformed(evt);
            }
        });
        simMenu.add(basicSAItem);

        psaItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        psaItem.setText("Sensitivity Analysis");
        psaItem.setEnabled(false);
        psaItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psaItemActionPerformed(evt);
            }
        });
        simMenu.add(psaItem);

        mpsItem.setText("MultiParameter Sensitivity Analysis");
        mpsItem.setToolTipText("Sensitivity analysis against a list of variables (parameters or substances), each being independently varied while the other parameters or substances are kept at their base values.  ");
        mpsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpsItemActionPerformed(evt);
            }
        });
        simMenu.add(mpsItem);
        simMenu.add(jSeparator3);

        bssaMenuItem.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        bssaMenuItem.setText("Basic Stochastic Sensitivity Analysis");
        bssaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bssaMenuItemActionPerformed(evt);
            }
        });
        simMenu.add(bssaMenuItem);

        rssItem.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        rssItem.setText("Repeated Stochastic Simulations");
        rssItem.setToolTipText("Conduct multiple rounds of simulations using the current parameter setting. \nThis is meaningful if the current algorithm is a stochastic algorithm.");
        rssItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rssItemActionPerformed(evt);
            }
        });
        simMenu.add(rssItem);
        simMenu.add(jSeparator2);

        psmcItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        psmcItem.setText("Parameter Search");
        psmcItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmcItemActionPerformed(evt);
            }
        });
        simMenu.add(psmcItem);

        noiseItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        noiseItem.setText("Noise Optimization (under development)");
        noiseItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noiseItemActionPerformed(evt);
            }
        });
        simMenu.add(noiseItem);

        psMultiSubstanceItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        psMultiSubstanceItem.setText("Multi Substance Parameter Search (under development)");
        psMultiSubstanceItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        psMultiSubstanceItemActionPerformed(evt);
                    }
                });
        simMenu.add(psMultiSubstanceItem);

        bottleneckItem.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        bottleneckItem.setText("Bottleneck Simulation (under development)");
        bottleneckItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottleneckItemActionPerformed(evt);
            }
        });
        simMenu.add(bottleneckItem);

        psGeneticItem.setText("Genetic Parameter Search");
        psGeneticItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psGeneticItemActionPerformed(evt);
            }
        });
        simMenu.add(psGeneticItem);

        menuBar.add(simMenu);

        mathMenu.setMnemonic('M');
        mathMenu.setText("Math");
        mathMenu.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N

        viewDAE.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        viewDAE.setText("Show equations");
        viewDAE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDAEActionPerformed(evt);
            }
        });
        mathMenu.add(viewDAE);

        editMath.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        editMath.setText("Customized Expressions");
        editMath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMathActionPerformed(evt);
            }
        });
        mathMenu.add(editMath);

        viewMATLAB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        viewMATLAB.setText("MATLAB Code (ode45)");
        viewMATLAB.setActionCommand("viewMATLAB");
        viewMATLAB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMATLABActionPerformed(evt);
            }
        });
        mathMenu.add(viewMATLAB);

        viewMatlabStochastic.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        viewMatlabStochastic.setText("MATLAB Code (stochastic)");
        viewMatlabStochastic.setActionCommand("viewMatlabStochastic");
        viewMatlabStochastic
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        viewMatlabStochasticActionPerformed(evt);
                    }
                });
        mathMenu.add(viewMatlabStochastic);

        menuBar.add(mathMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");
        helpMenu.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N

        aboutItem.setText("About Dynetica");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutItem);

        menuBar.add(helpMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        toolBarPanel.setLayout(new java.awt.GridLayout(2, 1));

        fileToolBar.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N

        newButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        fileToolBar.add(newButton);

        openButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        fileToolBar.add(openButton);

        renameButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        renameButton.setText("Rename");
        renameButton.setEnabled(false);
        renameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameButtonActionPerformed(evt);
            }
        });
        fileToolBar.add(renameButton);

        saveButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        saveButton.setText("Save");
        saveButton
                .setEnabled(currentSystem != null && !currentSystem.isSaved());
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        fileToolBar.add(saveButton);

        saveAsButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        saveAsButton.setText("Save As");
        saveAsButton.setEnabled(currentSystem != null);
        saveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsButtonActionPerformed(evt);
            }
        });
        fileToolBar.add(saveAsButton);

        closeButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        closeButton.setText("Close");
        closeButton.setEnabled(currentSystem != null);
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        fileToolBar.add(closeButton);

        toolBarPanel.add(fileToolBar);

        simulationToolBar.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N

        startButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        startButton.setText("Start");
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        simulationToolBar.add(startButton);

        pauseButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        pauseButton.setText("Pause");
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });
        simulationToolBar.add(pauseButton);

        resumeButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        resumeButton.setText("Resume");
        resumeButton.setDefaultCapable(false);
        resumeButton.setEnabled(false);
        resumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeButtonActionPerformed(evt);
            }
        });
        simulationToolBar.add(resumeButton);

        plotButton.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        plotButton.setText("Plot");
        plotButton.setEnabled(false);
        plotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotButtonActionPerformed(evt);
            }
        });
        simulationToolBar.add(plotButton);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        jLabel1.setText("Algorithm");
        simulationToolBar.add(jLabel1);

        algorithmBox.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        algorithmBox.setModel(algorithmBoxModel);
        algorithmBox.setEnabled(false);
        algorithmBox.setMaximumSize(new java.awt.Dimension(150, 28));
        algorithmBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmBoxActionPerformed(evt);
            }
        });
        simulationToolBar.add(algorithmBox);

        toolBarPanel.add(simulationToolBar);

        getContentPane().add(toolBarPanel, java.awt.BorderLayout.NORTH);

        systemPane.setModel(new DefaultSingleSelectionModel());
        systemPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                systemPaneStateChanged(evt);
            }
        });
        getContentPane().add(systemPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void sdeItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_sdeItemActionPerformed
        //
        // Only create a new instance of the algorithm if necessary.
        //
        if (currentAlgorithm == null
                || !(currentAlgorithm instanceof OptimizedDirectMethod)) {
            currentAlgorithm = new OptimizedDirectMethod();
            currentAlgorithm.setSystem(currentSystem);
        }

        javax.swing.JFrame algoFrame = new JFrame(
                "Stochastic Differential Equation");
        javax.swing.JPanel algorithmEditor = currentAlgorithm.editor();
        algoFrame.getContentPane().add(algorithmEditor);
        algoFrame.pack();
        algoFrame.setLocation(400, 300);
        algoFrame.show();
    }// GEN-LAST:event_sdeItemActionPerformed

    private void optimizedDirectItemActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_optimizedDirectItemActionPerformed
        //
        // Only create a new instance of the algorithm if necessary.
        //
        if (currentAlgorithm == null
                || !(currentAlgorithm instanceof OptimizedDirectMethod)) {
            currentAlgorithm = new OptimizedDirectMethod();
            currentAlgorithm.setSystem(currentSystem);
        }

        javax.swing.JFrame algoFrame = new JFrame("Direct Method");
        javax.swing.JPanel algorithmEditor = currentAlgorithm.editor();
        algoFrame.getContentPane().add(algorithmEditor);
        algoFrame.pack();
        algoFrame.setLocation(400, 300);
        algoFrame.show();
    }// GEN-LAST:event_optimizedDirectItemActionPerformed

    private void annotateItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_annotateItemActionPerformed
        showAnnotation();
    }// GEN-LAST:event_annotateItemActionPerformed

    private void firstReactionMethodItemActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_firstReactionMethodItemActionPerformed
        //
        // Only create a new instance of the algorithm if necessary.
        //
        if (currentAlgorithm == null
                || !(currentAlgorithm instanceof FirstReactionMethod)) {
            currentAlgorithm = new FirstReactionMethod();
            currentAlgorithm.setSystem(currentSystem);
        }

        javax.swing.JFrame algoFrame = new JFrame("First Reaction Method");
        javax.swing.JPanel algorithmEditor = currentAlgorithm.editor();
        algoFrame.getContentPane().add(algorithmEditor);
        algoFrame.pack();
        algoFrame.setLocation(400, 300);
        algoFrame.show();
    }// GEN-LAST:event_firstReactionMethodItemActionPerformed

    private void viewDAEActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewDAEActionPerformed
        viewSystemEquations();
    }// GEN-LAST:event_viewDAEActionPerformed

    private void renameButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_renameButtonActionPerformed
        renameSystem();
    }// GEN-LAST:event_renameButtonActionPerformed

    private void renameItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_renameItemActionPerformed
        renameSystem();
    }// GEN-LAST:event_renameItemActionPerformed

    private void directMethodItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_directMethodItemActionPerformed
        //
        // Only create a new instance of the algorithm if necessary.
        //
        if (currentAlgorithm == null
                || !(currentAlgorithm instanceof DirectMethod)) {
            currentAlgorithm = new DirectMethod();
            currentAlgorithm.setSystem(currentSystem);
        }

        javax.swing.JFrame algoFrame = new JFrame("Direct Method");
        javax.swing.JPanel algorithmEditor = currentAlgorithm.editor();
        algoFrame.getContentPane().add(algorithmEditor);
        algoFrame.pack();
        algoFrame.setLocation(400, 300);
        algoFrame.show();
    }// GEN-LAST:event_directMethodItemActionPerformed

    private void vRungeKutta4ItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_vRungeKutta4ItemActionPerformed
        //
        // Only create a new instance of the algorithm if necessary.
        //
        if (currentAlgorithm == null
                || !(currentAlgorithm instanceof RungeKuttaFehlberg)) {
            currentAlgorithm = new RungeKuttaFehlberg();
            currentAlgorithm.setSystem(currentSystem);
        }

        javax.swing.JFrame algoFrame = new JFrame(
                "Variable Time-step 4th Order Runge-Kutta Algorithm");
        javax.swing.JPanel algorithmEditor = currentAlgorithm.editor();
        algoFrame.getContentPane().add(algorithmEditor);
        algoFrame.pack();
        algoFrame.setLocation(400, 300);
        algoFrame.show();
    }// GEN-LAST:event_vRungeKutta4ItemActionPerformed

    private void rungeKutta4ItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_rungeKutta4ItemActionPerformed
        //
        // Only create a new instance of the algorithm if necessary.
        //
        if (currentAlgorithm == null
                || !(currentAlgorithm instanceof RungeKutta4)) {
            currentAlgorithm = new RungeKutta4();
            currentAlgorithm.setSystem(currentSystem);
        }

        javax.swing.JFrame algoFrame = new JFrame(
                "Fixed Time-step 4th Order Runge-Kutta Algorithm");
        javax.swing.JPanel algorithmEditor = currentAlgorithm.editor();
        algoFrame.getContentPane().add(algorithmEditor);
        algoFrame.pack();
        algoFrame.setLocation(400, 300);
        algoFrame.show();
    }// GEN-LAST:event_rungeKutta4ItemActionPerformed

    private void showSimToolBarItemActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showSimToolBarItemActionPerformed
        setToolBar();
    }// GEN-LAST:event_showSimToolBarItemActionPerformed

    private void showFileToolBarItemActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showFileToolBarItemActionPerformed
        setToolBar();
    }// GEN-LAST:event_showFileToolBarItemActionPerformed

    private void psaItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_psaItemActionPerformed
        ApplicationFrame frame = new ApplicationFrame("Sensitivity Analysis");
        frame.getContentPane().add(
                new BasicSensitivityAnalysisEditor(
                        new BasicSensitivityAnalysis(currentSystem)));
        frame.pack();
        frame.show();
    }// GEN-LAST:event_psaItemActionPerformed

    private void editMathActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_editMathActionPerformed
        ApplicationFrame frame = new ApplicationFrame(
                "Define/Modify Customized Math Expressions");
        frame.getContentPane().add(new FunctionEditor());
        frame.pack();
        frame.show();
    }// GEN-LAST:event_editMathActionPerformed

    private void newGSMenuActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newGSMenuActionPerformed
        newGeneticSystem();
    }// GEN-LAST:event_newGSMenuActionPerformed

    private void algorithmBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_algorithmBoxActionPerformed
        int index = algorithmBox.getSelectedIndex();
        String newAlgorithmName = "dynetica.algorithm."
                + algorithmBoxModel.getElementAt(index);

        //
        // Only create a new instance of the algorithm if necessary.
        //
        if (currentAlgorithm == null
                || currentAlgorithm.getClass().getName()
                        .compareTo(newAlgorithmName) != 0) {
            try {
                currentAlgorithm = (Algorithm) Class.forName(newAlgorithmName)
                        .newInstance();
            } catch (Exception e) {
                e.printStackTrace();
            }
            currentAlgorithm.setSystem(currentSystem);
        }

        javax.swing.JFrame algoFrame = new JFrame("Algorithm "
                + newAlgorithmName);
        javax.swing.JPanel algorithmEditor = currentAlgorithm.editor();
        algoFrame.getContentPane().add(algorithmEditor);
        algoFrame.pack();
        algoFrame.setLocation(400, 300);
        algoFrame.show();

    }// GEN-LAST:event_algorithmBoxActionPerformed

    private void closeItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeItemActionPerformed
        closeSystem();
    }// GEN-LAST:event_closeItemActionPerformed

    private void macLFActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_macLFActionPerformed
        setLookAndFeel("javax.swing.plaf.mac.MacLookAndFeel");
    }// GEN-LAST:event_macLFActionPerformed

    private void motifLFActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_motifLFActionPerformed
        setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
    }// GEN-LAST:event_motifLFActionPerformed

    private void swingLFActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_swingLFActionPerformed
        setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
    }// GEN-LAST:event_swingLFActionPerformed

    private void winLFActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_winLFActionPerformed
        setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
    }// GEN-LAST:event_winLFActionPerformed

    private void startItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_startItemActionPerformed
        startSimulation();
    }// GEN-LAST:event_startItemActionPerformed

    private void pauseItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_pauseItemActionPerformed
        pauseSimulation();
    }// GEN-LAST:event_pauseItemActionPerformed

    private void newRSystemMenuActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newRSystemMenuActionPerformed
        newReactiveSystem();
    }// GEN-LAST:event_newRSystemMenuActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_pauseButtonActionPerformed
        pauseSimulation();
    }// GEN-LAST:event_pauseButtonActionPerformed

    private void resumeItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resumeItemActionPerformed
        resumeSimulation();
    }// GEN-LAST:event_resumeItemActionPerformed

    private void resumeButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resumeButtonActionPerformed
        resumeSimulation();
    }// GEN-LAST:event_resumeButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
        saveSystem();
    }// GEN-LAST:event_saveButtonActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveItemActionPerformed
        saveSystem();
    }// GEN-LAST:event_saveItemActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeButtonActionPerformed
        closeSystem();
    }// GEN-LAST:event_closeButtonActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exitItemActionPerformed
        dynetica.util.DyneticaProperties.saveProperties();
        System.exit(0);
    }// GEN-LAST:event_exitItemActionPerformed

    private void plotItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_plotItemActionPerformed
        plotCurrentSimulationResult();
    }// GEN-LAST:event_plotItemActionPerformed

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_aboutItemActionPerformed
        new AboutDyneticaFrame().show();
    }// GEN-LAST:event_aboutItemActionPerformed

    private void saveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveAsButtonActionPerformed
        saveAsSystem();
    }// GEN-LAST:event_saveAsButtonActionPerformed

    private void saveAsItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveAsItemActionPerformed
        saveAsSystem();
    }// GEN-LAST:event_saveAsItemActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_openMenuActionPerformed
        openSystem();
    }// GEN-LAST:event_openMenuActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newButtonActionPerformed
        newReactiveSystem();
    }// GEN-LAST:event_newButtonActionPerformed

    private void plotButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_plotButtonActionPerformed
        plotCurrentSimulationResult();
    }// GEN-LAST:event_plotButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_startButtonActionPerformed
        startSimulation();
    }// GEN-LAST:event_startButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_openButtonActionPerformed
        openSystem();
    }// GEN-LAST:event_openButtonActionPerformed

    private void systemPaneStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_systemPaneStateChanged
        setCurrentSystem();
    }// GEN-LAST:event_systemPaneStateChanged

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitForm

        dynetica.util.DyneticaProperties.saveProperties();
        System.exit(0);
    }// GEN-LAST:event_exitForm

    private void viewMATLABActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewMATLABActionPerformed
        viewMatlabCode();
    }// GEN-LAST:event_viewMATLABActionPerformed

    private void viewMatlabStochasticActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewMatlabStochasticActionPerformed
        viewMatlabStochastic();
    }// GEN-LAST:event_viewMatlabStochasticActionPerformed

    private void psmcItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_psmcItemActionPerformed
        viewPSMC();
    }// GEN-LAST:event_psmcItemActionPerformed

    private void noiseItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_noiseItemActionPerformed
        viewNOCT();
    }// GEN-LAST:event_noiseItemActionPerformed

    private void psMultiSubstanceItemActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_psMultiSubstanceItemActionPerformed
        viewPSMS();
    }// GEN-LAST:event_psMultiSubstanceItemActionPerformed

    private void bottleneckItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_bottleneckItemActionPerformed
        viewBottleneck();
    }// GEN-LAST:event_bottleneckItemActionPerformed

    private void psGeneticItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_psGeneticItemActionPerformed
        viewParameterSearchGenetic();
    }// GEN-LAST:event_psGeneticItemActionPerformed

    private void mpsItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_mpsItemActionPerformed
        ApplicationFrame frame = new ApplicationFrame(
                "MultiParameter Sensitivity Analysis");
        frame.getContentPane().add(
                new MultiParameterSensitivityAnalysisEditor(
                        new MultiParameterSensitivityAnalysis(currentSystem)));
        frame.pack();
        frame.show();
    }// GEN-LAST:event_mpsItemActionPerformed

    private void basicSAItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_basicSAItemActionPerformed
        ApplicationFrame frame = new ApplicationFrame(
                "Basic Sensitivity Analysis");
        frame.getContentPane().add(
                new BasicSensitivityAnalysisEditor(
                        new BasicSensitivityAnalysis(currentSystem)));
        frame.pack();
    }// GEN-LAST:event_basicSAItemActionPerformed

    private void bssaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_bssaMenuItemActionPerformed
        ApplicationFrame frame = new ApplicationFrame(
                "Basic stochastic sensitivity analysis");
        frame.getContentPane().add(
                new dynetica.gui.algorithms.BasicStochasticSensitivityEditor(
                        new BasicStochasticSensitivityAnalysis(currentSystem)));
        frame.pack();
        frame.show();
    }// GEN-LAST:event_bssaMenuItemActionPerformed

    private void rssItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_rssItemActionPerformed
        ApplicationFrame frame = new ApplicationFrame(
                "Repeated stochastic simulations");
        frame.getContentPane()
                .add(new dynetica.gui.algorithms.RepeatedStochasticSimulationsEditor(
                        new RepeatedStochasticSimulations(currentSystem)));
        frame.pack();
        frame.show(); // TODO add your handling code here:
    }// GEN-LAST:event_rssItemActionPerformed

    private void renameSystem() {
        String newName = (String) JOptionPane.showInputDialog(this, "New name",
                "Input", JOptionPane.QUESTION_MESSAGE, null, null,
                currentSystem.getName());
        if (newName.length() > 0
                && newName.compareTo(currentSystem.getName()) != 0) {
            currentSystem.setName(newName);
            systemPane.setTitleAt(systemPane.getSelectedIndex(), newName);
            currentSystem.setSaved(false);
        }
    }

    private void viewSystemEquations() {
        JFrame jf = new JFrame("Equations for " + currentSystem.getName());
        jf.getContentPane().add(new EquationsViewer(currentSystem));
        jf.pack();
        jf.show();
    }

    private void viewMatlabCode() {
        JFrame jf = new JFrame("MATLAB Code for " + currentSystem.getName());
        jf.getContentPane().add(new EquationsMATLAB(currentSystem));
        jf.pack();
        jf.show();
    }

    private void viewPSMC() {
        JFrame jf = new JFrame("Parameter Search for "
                + currentSystem.getName());
        jf.getContentPane().add(
                new ParameterSearchMonteCarloEditor(currentSystem));
        jf.pack();
        jf.show();
    }

    private void viewPSMS() {
        JFrame jf = new JFrame("Multi Substance Parameter Search for "
                + currentSystem.getName());
        jf.getContentPane().add(
                new ParameterSearchMultiSubstanceEditor(currentSystem));
        jf.pack();
        jf.show();
    }

    private void viewNOCT() {
        JFrame jf = new JFrame("Noise Optimization for "
                + currentSystem.getName());
        jf.getContentPane().add(new NoiseOptimizationEditor(currentSystem));
        jf.pack();
        jf.show();
    }

    private void viewBottleneck() {
        JFrame jf = new JFrame("Bottleneck Simulation for "
                + currentSystem.getName());
        jf.getContentPane().add(new BottleNeckEditor(currentSystem));
        jf.pack();
        jf.show();
    }

    private void viewParameterSearchGenetic() {
        JFrame jf = new JFrame("Genetic Parameter Search for "
                + currentSystem.getName());
        jf.getContentPane()
                .add(new ParameterSearchGeneticEditor(currentSystem));
        jf.pack();
        jf.show();
    }

    private void viewMatlabStochastic() {
        JFrame jf = new JFrame("MATLAB Stochastic Algorithm for "
                + currentSystem.getName());
        jf.getContentPane().add(new EquationsMatlabStochastic(currentSystem));
        jf.pack();
        jf.show();
    }

    private void setToolBar() {
        if (showFileToolBarItem.isSelected() || showSimToolBarItem.isSelected()) {
            if (!toolBarPanel.isVisible())
                toolBarPanel.setVisible(true);
            fileToolBar.setVisible(showFileToolBarItem.isSelected());
            simulationToolBar.setVisible(showSimToolBarItem.isSelected());
        } else
            toolBarPanel.setVisible(false);
    }

    private void addSystemStateChangeListener(SystemStateChangeListener l) {
        if (currentSystem != null)
            currentSystem.addSystemStateChangeListener(l);
    }

    private void removeSystemStateChangeListener(SystemStateChangeListener l) {
        if (currentSystem != null)
            currentSystem.removeSystemStateChangeListener(l);
    }

    private void setLookAndFeel(String lnfName) {
        try {
            UIManager.setLookAndFeel(lnfName);
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void plotCurrentSimulationResult() {
        //
        // July 18, 2013. This code is revised to use a new plot window to show
        // rates as well.
        //
        JFrame jf = new PhasePlaneWindow(currentSystem);
        jf.show();
    }

    private void setCurrentSystem() {
        if (currentSystem != null && systemListener != null)
            removeSystemStateChangeListener(systemListener);

        int index = systemPane.getSelectedIndex();
        if (index >= 0) {
            currentSystem = (ReactiveSystem) (openedSystems.get(index));
            if (currentSystem.getAlgorithm() != null)
                currentAlgorithm = currentSystem.getAlgorithm();
            else {
                currentAlgorithm = new dynetica.algorithm.RungeKuttaFehlberg();
                currentAlgorithm.setSystem(currentSystem);
            }

        }

        else
            currentSystem = null;

        if (currentSystem != null) {
            addSystemStateChangeListener(new SystemStateChangeListener() {
                public void systemStateChanged(SystemStateChangeEvent e) {
                    saveButton.setEnabled(true);
                    saveItem.setEnabled(true);
                }
            });
        }
    }

    private void newReactiveSystem() {
        String newName;
        for (;;) {
            newName = JOptionPane.showInputDialog(
                    "Enter the name for the new system:").trim();
            if (newName.length() > 0)
                break;
        }
        currentSystem = new ReactiveSystem(newName);
        addSystem();
    }

    private void newGeneticSystem() {
        String newName;
        for (;;) {
            newName = JOptionPane.showInputDialog(
                    "Enter the name for the new system:").trim();
            if (newName.length() > 0)
                break;
        }
        currentSystem = new GeneticSystem(newName);
        addSystem();
    }

    // Added 5/8/2005 L. You. show annotation of the system.
    private void showAnnotation() {
        javax.swing.JFrame algoFrame = new JFrame("System Information");
        javax.swing.JPanel annotationEditor = currentSystem.systemInformation
                .editor();
        algoFrame.getContentPane().add(annotationEditor);
        algoFrame.pack();
        algoFrame.setLocation(400, 300);
        algoFrame.show();
    }

    //
    // close the system and the file associated with it.
    //
    private void closeSystem() {
        if (openedSystems.size() > 1) {
            int currentIndex = systemPane.getSelectedIndex();
            systemPane.remove(currentIndex);
            openedSystems.remove(currentSystem);
            int newIndex = Math.min(openedSystems.size() - 1, currentIndex);
            systemPane.setSelectedIndex(newIndex);
            setCurrentSystem();
        } else {
            openedSystems.remove(currentSystem);
            systemPane.remove(0);
            //
            // disable all the buttons that are meaningful only when some
            // systems are opened
            //
            simMenu.setEnabled(false);
            editMenu.setEnabled(false);
            renameButton.setEnabled(false);
            algorithmBox.setEnabled(false);
            startButton.setEnabled(false);
            pauseButton.setEnabled(false);
            resumeButton.setEnabled(false);
            plotButton.setEnabled(false);
            saveButton.setEnabled(false);
            saveAsButton.setEnabled(false);
            closeButton.setEnabled(false);
            startItem.setEnabled(false);
            pauseItem.setEnabled(false);
            resumeItem.setEnabled(false);
            psaItem.setEnabled(false);
        }
    }

    private void startSimulation() {
        resumeItem.setEnabled(false);
        resumeButton.setEnabled(false);
        pauseItem.setEnabled(true);
        pauseButton.setEnabled(true);
        plotItem.setEnabled(true);
        plotButton.setEnabled(true);
        // startItem.setEnabled(false);
        // startButton.setEnabled(false);

        currentAlgorithm.start();
    }

    private void pauseSimulation() {
        resumeItem.setEnabled(true);
        resumeButton.setEnabled(true);
        startItem.setEnabled(true);
        startButton.setEnabled(true);
        currentAlgorithm.pause();
    }

    private void resumeSimulation() {
        resumeItem.setEnabled(false);
        resumeButton.setEnabled(false);
        currentAlgorithm.resume();
    }

    private void saveSystem() {
        if (!currentSystem.isSaved()) {
            if (currentSystem.getFile() != null)
                currentSystem.save();
            else
                saveAsSystem();
            saveItem.setEnabled(false);
            saveButton.setEnabled(false);
        }
    }

    private void saveAsSystem() {
        JFileChooser fileChooser = new JFileChooser(workDir);
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser
                .setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(
                        "Dynetica files (*.dyn)", "dyn"));
        fileChooser
                .addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(
                        "Synthetic Biology Markup Language (*.xml)", "xml"));

        int returnVal = fileChooser.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            // System.out.println(input.getParentFile().getPath());
            workDir = file.getParentFile().getAbsolutePath();
            dynetica.util.DyneticaProperties.setProperty("workingDirectory",
                    workDir);
            if (fileChooser.getFileFilter().equals(
                    fileChooser.getAcceptAllFileFilter()))
                currentSystem.saveAs(file, "dyn");
            else {
                String name = file.getPath();
                String extension = ((javax.swing.filechooser.FileNameExtensionFilter) fileChooser
                        .getFileFilter()).getExtensions()[0];

                if (name.indexOf(".dyn") < 0)
                    currentSystem.saveAs(new File(name + "." + extension), extension);
                else
                    currentSystem.saveAs(new File(name), extension);
            }
            saveItem.setEnabled(false);
            saveButton.setEnabled(false);
        }

    }

    private void addSystem() {
        System.out.println("Setting up the GUI...");
        openedSystems.add(currentSystem);
        // System.out.println("Initializing the editor...");
        JPanel currentSystemEditor = currentSystem.editor();
        System.out.println("Configuring SystemManager...");
        editMenu.setEnabled(true);
        renameButton.setEnabled(true);
        closeItem.setEnabled(true);
        saveAsItem.setEnabled(true);
        closeButton.setEnabled(true);
        saveAsButton.setEnabled(true);

        systemPane.addTab(currentSystem.getName(), currentSystemEditor);
        systemPane.setSelectedComponent(currentSystemEditor);
        // setCurrentSystem(
        simMenu.setEnabled(true);
        simulationToolBar.setEnabled(true);
        algorithmBox.setEnabled(true);
        startButton.setEnabled(true);
        startItem.setEnabled(true);
        pauseButton.setEnabled(false);
        pauseItem.setEnabled(false);
        resumeButton.setEnabled(false);
        resumeItem.setEnabled(false);
        plotButton.setEnabled(false);
        plotItem.setEnabled(false);
        psaItem.setEnabled(true);
        this.pack();
    }

    private void openSystem() {
        JFileChooser fileChooser = new JFileChooser(workDir);
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(File pathname) {
                return pathname.getName().endsWith(".dyn")
                        || pathname.isDirectory();
            }

            public String getDescription() {
                return "Dynetica files (*.dyn)";
            }

        });

        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                System.out.println("Building up the system from input file...");
                File file = fileChooser.getSelectedFile();
                workDir = file.getParentFile().getAbsolutePath();
                dynetica.util.DyneticaProperties.setProperty(
                        "workingDirectory", workDir);
                currentSystem = ((ReactiveSystem) SystemBuilder.build(file));
                addSystem();
                showAnnotation();
                System.out.println("System initialization OK.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error in system file!",
                        "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JComboBox algorithmBox;
    private javax.swing.JMenu algorithmMenu;
    private javax.swing.JMenuItem annotateItem;
    private javax.swing.JMenuItem basicSAItem;
    private javax.swing.JMenuItem bottleneckItem;
    private javax.swing.JMenuItem bssaMenuItem;
    private javax.swing.JButton closeButton;
    private javax.swing.JMenuItem closeItem;
    private javax.swing.JMenuItem directMethodItem;
    private javax.swing.JMenuItem editMath;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JToolBar fileToolBar;
    private javax.swing.JMenuItem firstReactionMethodItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenu lookAndFeelMenu;
    private javax.swing.JMenuItem macLF;
    private javax.swing.JMenu mathMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem motifLF;
    private javax.swing.JMenuItem mpsItem;
    private javax.swing.JButton newButton;
    private javax.swing.JMenuItem newGSMenu;
    private javax.swing.JMenu newMenu;
    private javax.swing.JMenuItem newRSMenu;
    private javax.swing.JMenuItem noiseItem;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JMenuItem optimizedDirectItem;
    private javax.swing.JButton pauseButton;
    private javax.swing.JMenuItem pauseItem;
    private javax.swing.JButton plotButton;
    private javax.swing.JMenuItem plotItem;
    private javax.swing.JMenuItem psGeneticItem;
    private javax.swing.JMenuItem psMultiSubstanceItem;
    private javax.swing.JMenuItem psaItem;
    private javax.swing.JMenuItem psmcItem;
    private javax.swing.JButton renameButton;
    private javax.swing.JMenuItem renameItem;
    private javax.swing.JButton resumeButton;
    private javax.swing.JMenuItem resumeItem;
    private javax.swing.JMenuItem rssItem;
    private javax.swing.JMenuItem rungeKutta4Item;
    private javax.swing.JButton saveAsButton;
    private javax.swing.JMenuItem saveAsItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JMenuItem sdeItem;
    private javax.swing.JCheckBoxMenuItem showFileToolBarItem;
    private javax.swing.JCheckBoxMenuItem showSimToolBarItem;
    private javax.swing.JMenu simMenu;
    private javax.swing.JToolBar simulationToolBar;
    private javax.swing.JButton startButton;
    private javax.swing.JMenuItem startItem;
    private javax.swing.JMenuItem swingLF;
    private javax.swing.JTabbedPane systemPane;
    private javax.swing.JPanel toolBarPanel;
    private javax.swing.JMenuItem vRungeKutta4Item;
    private javax.swing.JMenuItem viewDAE;
    private javax.swing.JMenuItem viewMATLAB;
    private javax.swing.JMenuItem viewMatlabStochastic;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JMenuItem winLF;

    // End of variables declaration//GEN-END:variables

    private class SimulationThread extends Thread {
        public SimulationThread(String str) {
            super(str);
        }

        public void run() {
            resumeItem.setEnabled(true);
            resumeButton.setEnabled(true);
            pauseItem.setEnabled(true);
            pauseButton.setEnabled(true);
            plotItem.setEnabled(true);
            plotButton.setEnabled(true);

            currentSystem.reset();
            if (currentAlgorithm.getSystem() != currentSystem)
                currentAlgorithm.setSystem(currentSystem);
            currentAlgorithm.reset();
            currentAlgorithm.run();
            Toolkit.getDefaultToolkit().beep();

        }
    }
}
