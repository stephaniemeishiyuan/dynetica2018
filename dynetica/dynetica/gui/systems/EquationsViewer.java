/*
 * EquationsViewer.java
 *
 * Created on July 6, 2002, 11:33 AM
 */

package dynetica.gui.systems;

/**
 *
 * @author  Lingchong You
 * @version 0.01
 */
import dynetica.entity.*;
import dynetica.system.*;
import dynetica.reaction.*;

public class EquationsViewer extends javax.swing.JPanel {
    private ReactiveSystem system;

    /** Creates new form ODE_ModelPanel */
    public EquationsViewer(ReactiveSystem system) {
        this.system = system;
        initComponents();
    }

    private String getEquations() {
        StringBuffer equationText = new StringBuffer("");
        Object[] substanceList = system.getSubstances().toArray();
        Object[] parameterList = system.getParameters().toArray();

        equationText.append("Rate equations:");
        equationText.append(System.getProperty("line.separator"));
        equationText.append("-----------------------------------");
        equationText.append(System.getProperty("line.separator"));

        for (int i = 0; i < substanceList.length; i++) {
            Substance s = (Substance) substanceList[i];
            if (s instanceof ExpressionVariable) {
                ExpressionVariable e = (ExpressionVariable) s;
                equationText.append(s.getName() + " = "
                        + e.getExpressionString());
                equationText.append(System.getProperty("line.separator"));
                continue;
            }
            equationText.append("d[" + s.getName() + "]/dt = ");
            dynetica.expression.GeneralExpression ge = s.getRateExpression();
            if (ge != null) {
                equationText.append(ge.toString());
            } else {
                equationText.append("<undefined>");
            }
            equationText.append(System.getProperty("line.separator"));
        }
        equationText.append(System.getProperty("line.separator"));
        equationText.append(System.getProperty("line.separator"));

        equationText.append("Substance initial values:");
        equationText.append(System.getProperty("line.separator"));
        equationText.append("-----------------------------------");
        equationText.append(System.getProperty("line.separator"));

        for (int i = 0; i < substanceList.length; i++) {
            Substance s = (Substance) substanceList[i];
            if (!(s instanceof ExpressionVariable)) {
                equationText.append(s.getName() + " : " + s.getInitialValue());
                equationText.append(System.getProperty("line.separator"));
            }
        }

        equationText.append(System.getProperty("line.separator"));
        equationText.append(System.getProperty("line.separator"));
        equationText.append("Parameter values:");
        equationText.append(System.getProperty("line.separator"));
        equationText.append("-----------------------------------");
        equationText.append(System.getProperty("line.separator"));

        for (int i = 0; i < parameterList.length; i++) {
            Parameter p = (Parameter) parameterList[i];
            equationText.append(p.getName() + " = " + p.getValue());
            equationText.append(System.getProperty("line.separator"));
        }

        return equationText.toString();
    }

    private void refresh() {
        this.equationArea.setText(this.getEquations());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        equationArea = new javax.swing.JTextArea();
        refreshButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setLayout(new java.awt.BorderLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Differential Equations");
        add(jLabel1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 400));

        equationArea.setEditable(false);
        equationArea.setText(getEquations());
        jScrollPane1.setViewportView(equationArea);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        refreshButton.setText("refresh");
        refreshButton
                .setToolTipText("Rrefresh the equations and parameters after the system has been changed.");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        add(refreshButton, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshButtonActionPerformed
        refresh();
    }// GEN-LAST:event_refreshButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea equationArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables

}
