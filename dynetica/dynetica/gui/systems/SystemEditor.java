/*
 * SystemEditor.java
 *
 * Created on April 18, 2001, 4:23 PM
 */

package dynetica.gui.systems;

/**
 * GeneticSystemEditor is used to edit a GeneticSystem object.
 * It is modified from the SystemEditor class, by adding the code
 * to handle the genomes that the system may carry.
 *
 * @author  Lingchong You
 * @version 0.1
 */

import dynetica.entity.*;
import dynetica.gui.entities.EntityEditorFrame;
import dynetica.system.*;
import dynetica.reaction.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.print.*;

public class SystemEditor extends javax.swing.JPanel {
    private ReactiveSystem system;
    private TreeModel treeModel;
    private SystemGraph systemGraph;
    private SourceEditor sourceEditor;
    private int currentView = 0; // 0 = graph view; 1 = sourse view;
    private String currentNodeName;
    private EntityEditorFrame editorFrame = new EntityEditorFrame();

    private JPopupMenu currentPopupMenu = null;
    private DefaultComboBoxModel entityTypes;
    final static String[] typeNames_GeneticSystem = {
            "dynetica.entity.Substance", "dynetica.entity.Parameter",
            "dynetica.entity.ExpressionVariable", "dynetica.entity.RNA",
            "dynetica.entity.Protein", "dynetica.entity.Ribosome",
            "dynetica.entity.RNAPolymerase", "dynetica.system.Genome",
            "dynetica.reaction.ProgressiveReaction",
            "dynetica.reaction.MassAction", "dynetica.reaction.Generator",
            "dynetica.reaction.Decay",
            "dynetica.reaction.MichaelisMentenReaction",
            "dynetica.reaction.HillActivation",
            "dynetica.reaction.EquilibratedMassAction",
            "dynetica.reaction.GenomeTranslocation" };

    final static String[] typeNames_ReactiveSystem = {
            "dynetica.entity.Substance", "dynetica.entity.Parameter",
            "dynetica.entity.ExpressionVariable",
            "dynetica.reaction.ProgressiveReaction",
            "dynetica.reaction.MassAction", "dynetica.reaction.Generator",
            "dynetica.reaction.Decay",
            "dynetica.reaction.MichaelisMentenReaction",
            // "dynetica.reaction.HillActivation",
            "dynetica.reaction.EquilibratedMassAction" };

    static String[] typeNames;

    /** Creates new customizer SystemEditor */
    public SystemEditor(ReactiveSystem system) {
        this.system = system;
        treeModel = system.getTreeModel();
        treeModel.addTreeModelListener(new SystemTreeModelListener());

        buildEntityTypes();
        System.out.println("Initializing the editor GUI ...");
        initComponents();

        currentPopupMenu = systemMenu;
        systemTree.addMouseListener(new PopupListener());
        systemTree.putClientProperty("JTree.lineStyle", "Angled");

        systemGraph = new SystemGraph(system);
        sourceEditor = new SourceEditor(system);

        systemGraphPane.setViewportView(systemGraph);
        systemGraph.addSizeChangeListener(new SystemGraph.SizeChangeListener() {
            public void sizeChanged(dynetica.event.SizeChangeEvent e) {
                graphSizeChanged(e);
            }
        });
    }

    private void graphSizeChanged(dynetica.event.SizeChangeEvent e) {
        systemGraph.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityMenu = new javax.swing.JPopupMenu();
        editItem = new javax.swing.JMenuItem();
        renameItem = new javax.swing.JMenuItem();
        deleteItem = new javax.swing.JMenuItem();
        duplicateItem = new javax.swing.JMenuItem();
        systemMenu = new javax.swing.JPopupMenu();
        newMenu = new javax.swing.JMenu();
        newSubtances = new javax.swing.JMenu();
        substanceItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        rnaItem = new javax.swing.JMenuItem();
        proteinItem = new javax.swing.JMenuItem();
        ribosomeItem = new javax.swing.JMenuItem();
        rnapItem = new javax.swing.JMenuItem();
        newParameters = new javax.swing.JMenu();
        parameterItem = new javax.swing.JMenuItem();
        newExpressions = new javax.swing.JMenu();
        newExpressionItem = new javax.swing.JMenuItem();
        newReactions = new javax.swing.JMenu();
        progressiveItem = new javax.swing.JMenuItem();
        massActionItem2 = new javax.swing.JMenuItem();
        generatorItem = new javax.swing.JMenuItem();
        decayItem = new javax.swing.JMenuItem();
        mmrItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JSeparator();
        emaItem = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JSeparator();
        translocationItem = new javax.swing.JMenuItem();
        newGenomes = new javax.swing.JMenu();
        genomeItem = new javax.swing.JMenuItem();
        substanceNodeMenu = new javax.swing.JPopupMenu();
        newSubstanceMenu = new javax.swing.JMenu();
        newSubstanceItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        newRNAItem = new javax.swing.JMenuItem();
        newProteinItem = new javax.swing.JMenuItem();
        newRibosomeItem = new javax.swing.JMenuItem();
        newRNAPItem = new javax.swing.JMenuItem();
        parameterNodeMenu = new javax.swing.JPopupMenu();
        newParameterMenu = new javax.swing.JMenu();
        newParameterItem = new javax.swing.JMenuItem();
        expressionNodeMenu = new javax.swing.JPopupMenu();
        newExpressionMenu = new javax.swing.JMenu();
        newExpressionMenuItem = new javax.swing.JMenuItem();
        reactionNodeMenu = new javax.swing.JPopupMenu();
        newReactionMenu = new javax.swing.JMenu();
        newPReactionItem = new javax.swing.JMenuItem();
        massActionItem = new javax.swing.JMenuItem();
        newGeneratorItem = new javax.swing.JMenuItem();
        newDecayItem = new javax.swing.JMenuItem();
        newMentenItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        newEMAItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        newTranslocationItem = new javax.swing.JMenuItem();
        genomeNodeMenu = new javax.swing.JPopupMenu();
        newGenomeMenu = new javax.swing.JMenu();
        newGenomeItem = new javax.swing.JMenuItem();
        toolBar = new javax.swing.JToolBar();
        newLabel = new javax.swing.JLabel();
        newEntityBox = new javax.swing.JComboBox();
        printButton = new javax.swing.JButton();
        infoButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        systemPane = new javax.swing.JSplitPane();
        systemViewPanel = new javax.swing.JPanel();
        treeSplitPane = new javax.swing.JSplitPane();
        treeScrollPane = new javax.swing.JScrollPane();
        systemTree = new javax.swing.JTree();
        informationPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        informationArea = new javax.swing.JTextArea();
        infoLabel = new javax.swing.JLabel();
        systemGraphPane = new javax.swing.JScrollPane();

        entityMenu.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        editItem.setText("Edit");
        editItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editItemActionPerformed(evt);
            }
        });
        entityMenu.add(editItem);

        renameItem.setText("Rename");
        renameItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameItemActionPerformed(evt);
            }
        });
        entityMenu.add(renameItem);

        deleteItem.setText("Delete");
        deleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemActionPerformed(evt);
            }
        });
        entityMenu.add(deleteItem);

        duplicateItem.setText("Clone");
        duplicateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateItemActionPerformed(evt);
            }
        });
        entityMenu.add(duplicateItem);

        newMenu.setText("New");
        newMenu.setDelay(80);

        newSubtances.setText("Substances");

        substanceItem.setText("Substance");
        substanceItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                substanceItemActionPerformed(evt);
            }
        });
        newSubtances.add(substanceItem);
        newSubtances.add(jSeparator7);

        rnaItem.setText("RNA");
        rnaItem.setEnabled(system instanceof GeneticSystem);
        rnaItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rnaItemActionPerformed(evt);
            }
        });
        newSubtances.add(rnaItem);

        proteinItem.setText("Protein");
        proteinItem.setEnabled(system instanceof GeneticSystem);
        proteinItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinItemActionPerformed(evt);
            }
        });
        newSubtances.add(proteinItem);

        ribosomeItem.setText("Ribosome");
        ribosomeItem.setEnabled(system instanceof GeneticSystem);
        ribosomeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ribosomeItemActionPerformed(evt);
            }
        });
        newSubtances.add(ribosomeItem);

        rnapItem.setText("RNAP");
        rnapItem.setEnabled(system instanceof GeneticSystem);
        rnapItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rnapItemActionPerformed(evt);
            }
        });
        newSubtances.add(rnapItem);

        newMenu.add(newSubtances);

        newParameters.setText("Parameters");

        parameterItem.setText("Parameter");
        parameterItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parameterItemActionPerformed(evt);
            }
        });
        newParameters.add(parameterItem);

        newMenu.add(newParameters);

        newExpressions.setText("New Expression");

        newExpressionItem.setText("Expression");
        newExpressionItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        newExpressionItemActionPerformed(evt);
                    }
                });
        newExpressions.add(newExpressionItem);

        newMenu.add(newExpressions);

        newReactions.setText("Reactions");

        progressiveItem.setText("Progressive Reaction");
        progressiveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                progressiveItemActionPerformed(evt);
            }
        });
        newReactions.add(progressiveItem);

        massActionItem2.setText("Mass Action");
        massActionItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                massActionItem2ActionPerformed(evt);
            }
        });
        newReactions.add(massActionItem2);

        generatorItem.setText("Generator");
        generatorItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatorItemActionPerformed(evt);
            }
        });
        newReactions.add(generatorItem);

        decayItem.setText("Decay");
        decayItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decayItemActionPerformed(evt);
            }
        });
        newReactions.add(decayItem);

        mmrItem.setText("Michaelis-Menten Reaction");
        mmrItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mmrItemActionPerformed(evt);
            }
        });
        newReactions.add(mmrItem);
        newReactions.add(jSeparator8);

        emaItem.setText("Equilibrated Mass Action");
        emaItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emaItemActionPerformed(evt);
            }
        });
        newReactions.add(emaItem);
        newReactions.add(jSeparator9);

        translocationItem.setText("Genome Translocation");
        translocationItem.setEnabled(system instanceof GeneticSystem);
        newReactions.add(translocationItem);

        newMenu.add(newReactions);

        newGenomes.setText("Genomes");
        newGenomes.setEnabled(system instanceof GeneticSystem);

        genomeItem.setText("Genome");
        genomeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genomeItemActionPerformed(evt);
            }
        });
        newGenomes.add(genomeItem);

        newMenu.add(newGenomes);

        systemMenu.add(newMenu);

        newSubstanceMenu.setText("New");

        newSubstanceItem.setText("Substance");
        newSubstanceItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSubstanceItemActionPerformed(evt);
            }
        });
        newSubstanceMenu.add(newSubstanceItem);
        newSubstanceMenu.add(jSeparator4);

        newRNAItem.setText("RNA");
        newRNAItem.setEnabled(system instanceof GeneticSystem);
        newRNAItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRNAItemActionPerformed(evt);
            }
        });
        newSubstanceMenu.add(newRNAItem);

        newProteinItem.setText("Protein");
        newProteinItem.setEnabled(system instanceof GeneticSystem);
        newProteinItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProteinItemActionPerformed(evt);
            }
        });
        newSubstanceMenu.add(newProteinItem);

        newRibosomeItem.setText("Ribosome");
        newRibosomeItem.setEnabled(system instanceof GeneticSystem);
        newRibosomeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRibosomeItemActionPerformed(evt);
            }
        });
        newSubstanceMenu.add(newRibosomeItem);

        newRNAPItem.setText("RNA Polymerase");
        newRNAPItem.setEnabled(system instanceof GeneticSystem);
        newRNAPItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRNAPItemActionPerformed(evt);
            }
        });
        newSubstanceMenu.add(newRNAPItem);

        substanceNodeMenu.add(newSubstanceMenu);

        newParameterMenu.setText("New");

        newParameterItem.setText("Parameter");
        newParameterItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newParameterItemActionPerformed(evt);
            }
        });
        newParameterMenu.add(newParameterItem);

        parameterNodeMenu.add(newParameterMenu);

        newExpressionMenu.setText("New");

        newExpressionMenuItem.setText("Expression");
        newExpressionMenuItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        newExpressionMenuItemActionPerformed(evt);
                    }
                });
        newExpressionMenu.add(newExpressionMenuItem);

        expressionNodeMenu.add(newExpressionMenu);

        newReactionMenu.setText("New");

        newPReactionItem.setText("Progressive Reaction");
        newPReactionItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPReactionItemActionPerformed(evt);
            }
        });
        newReactionMenu.add(newPReactionItem);

        massActionItem.setText("Mass Action");
        massActionItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                massActionItemActionPerformed(evt);
            }
        });
        newReactionMenu.add(massActionItem);

        newGeneratorItem.setText("Generator Reaction");
        newGeneratorItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGeneratorItemActionPerformed(evt);
            }
        });
        newReactionMenu.add(newGeneratorItem);

        newDecayItem.setText("Decay Reaction");
        newDecayItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDecayItemActionPerformed(evt);
            }
        });
        newReactionMenu.add(newDecayItem);

        newMentenItem.setText("Michaelis-Menten Reaction");
        newMentenItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMentenItemActionPerformed(evt);
            }
        });
        newReactionMenu.add(newMentenItem);
        newReactionMenu.add(jSeparator5);

        newEMAItem.setText("Equilibrated Mass Action");
        newEMAItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newEMAItemActionPerformed(evt);
            }
        });
        newReactionMenu.add(newEMAItem);
        newReactionMenu.add(jSeparator6);

        newTranslocationItem.setText("Genome Translocation");
        newTranslocationItem.setEnabled(system instanceof GeneticSystem);
        newTranslocationItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        newTranslocationItemActionPerformed(evt);
                    }
                });
        newReactionMenu.add(newTranslocationItem);

        reactionNodeMenu.add(newReactionMenu);

        newGenomeMenu.setText("New");

        newGenomeItem.setText("Genome");
        newGenomeItem.setEnabled(system instanceof GeneticSystem);
        newGenomeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGenomeItemActionPerformed(evt);
            }
        });
        newGenomeMenu.add(newGenomeItem);

        genomeNodeMenu.add(newGenomeMenu);

        setLayout(new java.awt.BorderLayout());

        toolBar.setFloatable(false);
        toolBar.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        newLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        newLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newLabel.setText("New");
        toolBar.add(newLabel);

        newEntityBox.setModel(entityTypes);
        newEntityBox.setMaximumSize(new java.awt.Dimension(300, 25));
        newEntityBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newEntityBoxActionPerformed(evt);
            }
        });
        toolBar.add(newEntityBox);

        printButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        printButton.setText("Print Graph");
        printButton
                .setToolTipText("Print the system graph to a printer or a file.");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });
        toolBar.add(printButton);

        infoButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        infoButton.setText("System Information");
        infoButton
                .setToolTipText("Display the detailed annotation of the system.");
        infoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButtonActionPerformed(evt);
            }
        });
        toolBar.add(infoButton);

        editButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        editButton.setText("Source");
        editButton
                .setToolTipText("Switching between source and graph view of the system information");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        toolBar.add(editButton);

        deleteButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("Delete the selected node.");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        toolBar.add(deleteButton);

        add(toolBar, java.awt.BorderLayout.SOUTH);

        systemPane.setDividerLocation(100);
        systemPane.setDividerSize(8);
        systemPane.setOneTouchExpandable(true);

        systemViewPanel.setLayout(new java.awt.GridLayout(1, 1));

        treeSplitPane.setDividerSize(2);
        treeSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        systemTree.setEditable(true);
        systemTree.setMaximumSize(new java.awt.Dimension(400, 100));
        systemTree.setMinimumSize(new java.awt.Dimension(74, 30));
        systemTree.setModel(treeModel);
        systemTree
                .addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
                    public void valueChanged(
                            javax.swing.event.TreeSelectionEvent evt) {
                        subTreeValueChanged(evt);
                    }
                });
        systemTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                systemTreeMouseClicked(evt);
            }
        });
        treeScrollPane.setViewportView(systemTree);

        treeSplitPane.setLeftComponent(treeScrollPane);

        informationPanel.setPreferredSize(new java.awt.Dimension(81, 60));
        informationPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setOpaque(false);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(27, 24));

        informationArea.setEditable(false);
        jScrollPane1.setViewportView(informationArea);

        informationPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        infoLabel.setText("Information");
        infoLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        informationPanel.add(infoLabel, java.awt.BorderLayout.NORTH);

        treeSplitPane.setRightComponent(informationPanel);

        systemViewPanel.add(treeSplitPane);

        systemPane.setLeftComponent(systemViewPanel);
        systemPane.setRightComponent(systemGraphPane);

        add(systemPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_editButtonActionPerformed
        if (currentView == 0) {
            // systemGraphPane.remove(systemGraph);
            systemPane.remove(systemGraphPane);
            systemPane.add(sourceEditor);
            sourceEditor.resetText();
            // sourceEditor.revalidate();
            currentView = 1;
            editButton.setText("Graph");
        } else {
            // systemGraphPane.remove(sourceEditor);
            systemPane.remove(sourceEditor);
            systemPane.add(systemGraphPane);
            currentView = 0;
            editButton.setText("Source");
        }

    }// GEN-LAST:event_editButtonActionPerformed

    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_infoButtonActionPerformed
        javax.swing.JFrame algoFrame = new JFrame("System Information");
        javax.swing.JPanel annotationEditor = system.systemInformation.editor();
        algoFrame.getContentPane().add(annotationEditor);
        algoFrame.pack();
        algoFrame.setLocation(400, 300);
        algoFrame.show();

    }// GEN-LAST:event_infoButtonActionPerformed

    /* clone the selected item */
    private void duplicateItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_duplicateItemActionPerformed

        DefaultMutableTreeNode node = (DefaultMutableTreeNode) systemTree
                .getLastSelectedPathComponent();
        if (node != null && node.isLeaf()) {
            Entity en = system.get((String) (node.getUserObject()));
            system.cloneEntity(en);
        }

    }// GEN-LAST:event_duplicateItemActionPerformed

    private void addBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addBoxActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_addBoxActionPerformed

    private void newExpressionItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newExpressionItemActionPerformed
        addEntity("dynetica.entity.ExpressionVariable");
    }// GEN-LAST:event_newExpressionItemActionPerformed

    private void newEntityBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newEntityBoxActionPerformed
        addEntity();
    }// GEN-LAST:event_newEntityBoxActionPerformed

    private void newExpressionMenuItemActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newExpressionMenuItemActionPerformed
        addEntity("dynetica.entity.ExpressionVariable");
    }// GEN-LAST:event_newExpressionMenuItemActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_printButtonActionPerformed
        PrinterJob printJob = PrinterJob.getPrinterJob();
        PageFormat pf = printJob.pageDialog(printJob.defaultPage());
        printJob.setPrintable(systemGraph, pf);
        if (printJob.printDialog()) {
            try {
                printJob.print();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }// GEN-LAST:event_printButtonActionPerformed

    private void massActionItem2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_massActionItem2ActionPerformed
        addEntity("dynetica.reaction.MassAction");
    }// GEN-LAST:event_massActionItem2ActionPerformed

    private void massActionItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_massActionItemActionPerformed
        addEntity("dynetica.reaction.MassAction");
    }// GEN-LAST:event_massActionItemActionPerformed

    private void genomeItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_genomeItemActionPerformed
        addEntity("dynetica.system.Genome");
    }// GEN-LAST:event_genomeItemActionPerformed

    private void rnapItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_rnapItemActionPerformed
        addEntity("dynetica.entity.RNAPolymerase");
    }// GEN-LAST:event_rnapItemActionPerformed

    private void ribosomeItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ribosomeItemActionPerformed
        addEntity("dynetica.entity.Ribosome");
    }// GEN-LAST:event_ribosomeItemActionPerformed

    private void proteinItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_proteinItemActionPerformed
        addEntity("dynetica.entity.Protein");
    }// GEN-LAST:event_proteinItemActionPerformed

    private void rnaItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_rnaItemActionPerformed
        addEntity("dynetica.entity.RNA");
    }// GEN-LAST:event_rnaItemActionPerformed

    private void substanceItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_substanceItemActionPerformed
        addEntity("dynetica.entity.Substance");
    }// GEN-LAST:event_substanceItemActionPerformed

    private void parameterItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_parameterItemActionPerformed
        addEntity("dynetica.entity.Parameter");
    }// GEN-LAST:event_parameterItemActionPerformed

    private void emaItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_emaItemActionPerformed
        addEntity("dynetica.reaction.EquilibratedMassAction");
    }// GEN-LAST:event_emaItemActionPerformed

    private void mmrItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_mmrItemActionPerformed
        addEntity("dynetica.reaction.MichaelisMentenReaction");
    }// GEN-LAST:event_mmrItemActionPerformed

    private void decayItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_decayItemActionPerformed
        addEntity("dynetica.reaction.Decay");
    }// GEN-LAST:event_decayItemActionPerformed

    private void generatorItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_generatorItemActionPerformed
        addEntity("dynetica.reaction.Generator");
    }// GEN-LAST:event_generatorItemActionPerformed

    private void progressiveItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_progressiveItemActionPerformed
        addEntity("dynetica.reaction.ProgressiveReaction");
    }// GEN-LAST:event_progressiveItemActionPerformed

    private void newGenomeItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newGenomeItemActionPerformed
        addEntity("dynetica.system.Genome");
    }// GEN-LAST:event_newGenomeItemActionPerformed

    private void newTranslocationItemActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newTranslocationItemActionPerformed
        addEntity("dynetica.reaction.GenomeTranslocation");
    }// GEN-LAST:event_newTranslocationItemActionPerformed

    private void newEMAItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newEMAItemActionPerformed
        addEntity("dynetica.reaction.EquilibratedMassAction");
    }// GEN-LAST:event_newEMAItemActionPerformed

    private void newMentenItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newMentenItemActionPerformed
        addEntity("dynetica.reaction.MichaelisMentenReaction");
    }// GEN-LAST:event_newMentenItemActionPerformed

    private void newDecayItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newDecayItemActionPerformed
        addEntity("dynetica.reaction.Decay");
    }// GEN-LAST:event_newDecayItemActionPerformed

    private void newGeneratorItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newGeneratorItemActionPerformed
        addEntity("dynetica.reaction.Generator");
    }// GEN-LAST:event_newGeneratorItemActionPerformed

    private void newPReactionItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newPReactionItemActionPerformed
        addEntity("dynetica.reaction.ProgressiveReaction");
    }// GEN-LAST:event_newPReactionItemActionPerformed

    private void newParameterItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newParameterItemActionPerformed
        addEntity("dynetica.entity.Parameter");
    }// GEN-LAST:event_newParameterItemActionPerformed

    private void newRNAPItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newRNAPItemActionPerformed
        addEntity("dynetica.entity.RNAPolymerase");
    }// GEN-LAST:event_newRNAPItemActionPerformed

    private void newRibosomeItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newRibosomeItemActionPerformed
        addEntity("dynetica.entity.Ribosome");
    }// GEN-LAST:event_newRibosomeItemActionPerformed

    private void newProteinItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newProteinItemActionPerformed
        addEntity("dynetica.entity.Protein");
    }// GEN-LAST:event_newProteinItemActionPerformed

    private void newRNAItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newRNAItemActionPerformed
        addEntity("dynetica.entity.RNA");
    }// GEN-LAST:event_newRNAItemActionPerformed

    private void newSubstanceItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newSubstanceItemActionPerformed
        addEntity("dynetica.entity.Substance");
    }// GEN-LAST:event_newSubstanceItemActionPerformed

    private void systemTreeMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_systemTreeMouseClicked
        if (evt.getClickCount() == 2 && currentNodeName != null)
            editEntity(currentNodeName);
    }// GEN-LAST:event_systemTreeMouseClicked

    private void deleteItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteItemActionPerformed
        deleteEntity();
    }// GEN-LAST:event_deleteItemActionPerformed

    private void renameItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_renameItemActionPerformed
        renameEntity();
    }// GEN-LAST:event_renameItemActionPerformed

    private void editItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_editItemActionPerformed
        editEntity(currentNodeName);
    }// GEN-LAST:event_editItemActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteButtonActionPerformed
        deleteEntity();
    }// GEN-LAST:event_deleteButtonActionPerformed

    private void subTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {// GEN-FIRST:event_subTreeValueChanged
        // try and catch contruct added by Kanishk Asthana on 23 July 2013 to
        // take care of a runtime error
        try {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) systemTree
                    .getLastSelectedPathComponent();
            if (node != null) {
                currentNodeName = (String) (node.getUserObject());

                // the following code is provided to display instantaneously the
                // information about the selected node.
                Entity e = system.getEntity(currentNodeName);
                if (e == null) {
                    return;
                }
                String text;
                if (e instanceof Substance)
                    text = ((Substance) e).getCompleteInfo();
                else if (e instanceof Parameter)
                    text = ((Parameter) e).getCompleteInfo();
                else
                    text = e.toString();

                if (text != null)
                    informationArea.setText(text);
                //
                currentPopupMenu = entityMenu; // default case.
            } else {
                currentNodeName = null;
                return;
            }

            if (node.isRoot()) {
                currentPopupMenu = systemMenu;
                return;
            }

            //
            // if the node is at the first level
            //
            if (((DefaultMutableTreeNode) node.getParent()).isRoot()) {
                if (currentNodeName.compareTo("Substances") == 0)
                    currentPopupMenu = substanceNodeMenu;
                else if (currentNodeName.compareTo("Parameters") == 0)
                    currentPopupMenu = parameterNodeMenu;
                else if (currentNodeName.compareTo("Expressions") == 0)
                    currentPopupMenu = expressionNodeMenu;
                else if (currentNodeName.compareTo("Reactions") == 0)
                    currentPopupMenu = reactionNodeMenu;
                else if (currentNodeName.compareTo("Genomes") == 0)
                    currentPopupMenu = genomeNodeMenu;
                else {
                    System.out
                            .println("Warning: Unknown node name! This shouldn't happen.");
                    currentPopupMenu = entityMenu;
                }
                return;
            }

            if (currentNodeName.compareTo("Progressive Reactions") == 0
                    || currentNodeName.compareTo("Equilibrated Reactions") == 0) {
                currentPopupMenu = reactionNodeMenu;
                return;
            }
        } catch (Exception subTreeExp) {
            System.out
                    .println("Warning: You most probably clicked a node and not an entity!");
        }

    }// GEN-LAST:event_subTreeValueChanged

    private void renameEntity() {
        String newNodeName = (String) JOptionPane.showInputDialog(this,
                "Enter the new name", "Input", JOptionPane.QUESTION_MESSAGE,
                null, null, currentNodeName);
        if (system.contains(newNodeName.trim()))
            return;
        system.get(currentNodeName).setName(newNodeName);
        currentNodeName = newNodeName;
    }

    private void editEntity(String name) {
        if (system.contains(name)) {
            JPanel editor = system.get(name).editor();

            editorFrame.addEditor(name, editor);
            editorFrame.pack();

            if (editorFrame.getComponentCount() == 1) {
                editorFrame.setLocation(this.getLocationOnScreen());
            }

            if (!editorFrame.isVisible())
                editorFrame.setVisible(true);
        }
    }

    private void deleteEntity() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) systemTree
                .getLastSelectedPathComponent();
        if (node != null && node.isLeaf()) {
            String entityName = (String) (node.getUserObject());
            // System.out.println("deleting" + entityName);
            system.remove(entityName);
            editorFrame.removeEditor(entityName);
        }
    }

    //
    // this method is used by newEntityBox.
    //
    private void addEntity() {
        addEntity(typeNames[newEntityBox.getSelectedIndex()]);
    }

    public void addEntity(String className) {
        try {
            Entity e = (Entity) (Class.forName(className).newInstance());

            String newName = e.getName();
            do {
                    newName = (String) JOptionPane
                            .showInputDialog(
                                    this,
                                    "Enter the name for the new "
                                            + (className.substring(className
                                                    .lastIndexOf('.') + 1) + "\n" + "Please make sure there are no spaces or curly brackets in the name."),
                                    "Input", JOptionPane.QUESTION_MESSAGE, null,
                                    null, e.getName());// i don't get the last
                                                       // statement e.getName();
                                                       // shouldn't it be setname
                    if(newName==null){return;}
            } while (newName.contains(" ") || newName.contains("{")
                    || newName.contains("}"));

            if (newName.length() > 0)
                e.setName(newName);
            e.setSystem(system);
            editEntity(e.getName());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void buildEntityTypes() {
        entityTypes = new DefaultComboBoxModel();
        if (system instanceof GeneticSystem) {
            typeNames = typeNames_GeneticSystem;
        } else {
            typeNames = typeNames_ReactiveSystem;
        }

        for (int i = 0; i < typeNames.length; i++)
            entityTypes.addElement(typeNames[i].substring(typeNames[i]
                    .lastIndexOf('.') + 1));

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem decayItem;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem deleteItem;
    private javax.swing.JMenuItem duplicateItem;
    private javax.swing.JButton editButton;
    private javax.swing.JMenuItem editItem;
    private javax.swing.JMenuItem emaItem;
    private javax.swing.JPopupMenu entityMenu;
    private javax.swing.JPopupMenu expressionNodeMenu;
    private javax.swing.JMenuItem generatorItem;
    private javax.swing.JMenuItem genomeItem;
    private javax.swing.JPopupMenu genomeNodeMenu;
    private javax.swing.JButton infoButton;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JTextArea informationArea;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JMenuItem massActionItem;
    private javax.swing.JMenuItem massActionItem2;
    private javax.swing.JMenuItem mmrItem;
    private javax.swing.JMenuItem newDecayItem;
    private javax.swing.JMenuItem newEMAItem;
    private javax.swing.JComboBox newEntityBox;
    private javax.swing.JMenuItem newExpressionItem;
    private javax.swing.JMenu newExpressionMenu;
    private javax.swing.JMenuItem newExpressionMenuItem;
    private javax.swing.JMenu newExpressions;
    private javax.swing.JMenuItem newGeneratorItem;
    private javax.swing.JMenuItem newGenomeItem;
    private javax.swing.JMenu newGenomeMenu;
    private javax.swing.JMenu newGenomes;
    private javax.swing.JLabel newLabel;
    private javax.swing.JMenuItem newMentenItem;
    private javax.swing.JMenu newMenu;
    private javax.swing.JMenuItem newPReactionItem;
    private javax.swing.JMenuItem newParameterItem;
    private javax.swing.JMenu newParameterMenu;
    private javax.swing.JMenu newParameters;
    private javax.swing.JMenuItem newProteinItem;
    private javax.swing.JMenuItem newRNAItem;
    private javax.swing.JMenuItem newRNAPItem;
    private javax.swing.JMenu newReactionMenu;
    private javax.swing.JMenu newReactions;
    private javax.swing.JMenuItem newRibosomeItem;
    private javax.swing.JMenuItem newSubstanceItem;
    private javax.swing.JMenu newSubstanceMenu;
    private javax.swing.JMenu newSubtances;
    private javax.swing.JMenuItem newTranslocationItem;
    private javax.swing.JMenuItem parameterItem;
    private javax.swing.JPopupMenu parameterNodeMenu;
    private javax.swing.JButton printButton;
    private javax.swing.JMenuItem progressiveItem;
    private javax.swing.JMenuItem proteinItem;
    private javax.swing.JPopupMenu reactionNodeMenu;
    private javax.swing.JMenuItem renameItem;
    private javax.swing.JMenuItem ribosomeItem;
    private javax.swing.JMenuItem rnaItem;
    private javax.swing.JMenuItem rnapItem;
    private javax.swing.JMenuItem substanceItem;
    private javax.swing.JPopupMenu substanceNodeMenu;
    private javax.swing.JScrollPane systemGraphPane;
    private javax.swing.JPopupMenu systemMenu;
    private javax.swing.JSplitPane systemPane;
    private javax.swing.JTree systemTree;
    private javax.swing.JPanel systemViewPanel;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JMenuItem translocationItem;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JSplitPane treeSplitPane;

    // End of variables declaration//GEN-END:variables

    //
    // added by Lingchong You.
    // the following code is needed to handle the changes in the Entity names.
    //
    class SystemTreeModelListener implements TreeModelListener {
        public void treeNodesChanged(TreeModelEvent e) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) systemTree
                    .getLastSelectedPathComponent();
            String newNodeName = (String) (node.getUserObject());
            if (system.contains(currentNodeName)) {
                system.get(currentNodeName).setName(newNodeName);
                currentNodeName = newNodeName;
            } else {
                //
                // ignore attempts to change the name of nodes that don't
                // correspond to Entities
                // in the System.
                //
                node.setUserObject(currentNodeName);
            }
        }

        public void treeNodesInserted(TreeModelEvent e) {
        }

        public void treeNodesRemoved(TreeModelEvent e) {
        }

        public void treeStructureChanged(TreeModelEvent e) {
        }
    }

    class PopupListener extends MouseAdapter {
        public void mousePressed(MouseEvent e) {
            showPopup(e);
        }

        public void mouseReleased(MouseEvent e) {
            showPopup(e);
        }

        private void showPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                currentPopupMenu.show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }

}
