/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dynetica.system;

import java.util.*;
import java.lang.reflect.*;
import java.io.*;

/**
 * 
 * @author System Administrator
 */
public class TestBuilder {
    public static void build(File file) {
        System.out
                .println("THE TEXT BELOW THIS LINE WAS GENERATED BY TESTBUILDER:");
        try {
            LineNumberReader reader = new LineNumberReader(new FileReader(file));
            String line;
            reader.mark(100000);
            line = reader.readLine();
            // System.out.println(line);
            StringTokenizer stringToken = new StringTokenizer(line, " \t{");// okay
                                                                            // the
                                                                            // second
                                                                            // string
            // specified the characters used to break a string damn this makes
            // sense now!
            String firstString = stringToken.nextToken();

            // System.out.println(firstString);
            String secondString = stringToken.nextToken();
            // System.out.println(secondString);
            reader.reset();
            line = reader.readLine();
            // System.out.println(line);
            int currentLIndex, currentRIndex;
            StringBuffer temp = new StringBuffer("");
            int numberOfLeft = 0;
            for (;;) {
                if (line != null) {
                    if (line.trim().length() > 0
                            && line.trim().charAt(0) != '#') {// # stands for
                        // comment in dynetica, I know this! must finish this
                        // and then sleep!
                        currentLIndex = line.indexOf('{');
                        currentRIndex = line.indexOf('}');

                        //
                        // if this line doesn't contain either curly bracket
                        //
                        if (currentLIndex == -1 && currentRIndex == -1) {
                            if (numberOfLeft == 0) {
                                System.out.println("Shouldn'd be here!!!:");
                                break;
                            } else {
                                temp.append(line + "\n");
                                line = reader.readLine();
                            }
                        }

                        //
                        // if this line contains '{' only
                        //
                        else if (currentLIndex != -1 && currentRIndex == -1) {
                            //
                            // if this is the first '{' found so far
                            //
                            if (numberOfLeft == 0) {
                                temp.append(line.substring(currentLIndex + 1)
                                        + "\n");
                            }// meaning simply skip forward! interesting, very
                             // interesting!
                             //
                             // otherwise, continue on
                             //
                            else {
                                temp.append(line + "\n");
                            }
                            line = reader.readLine();
                            numberOfLeft++;
                        }

                        //
                        // if this line contains '}' only
                        //
                        else if (currentLIndex == -1 && currentRIndex != -1) {
                            numberOfLeft--;
                            if (numberOfLeft == 0) {
                                //
                                // the matching '}' for the first '{' is found
                                //
                                temp.append(line.substring(0, currentRIndex)
                                        + "\n");
                                break;// again do nothing interesting this is
                                      // simply ignored i think
                            } else if (numberOfLeft > 0) {
                                temp.append(line
                                        .substring(0, currentRIndex + 1) + "\n");
                                line = line.substring(currentRIndex + 1);// aha
                                                                         // this
                                                                         // one
                                                                         // is
                                                                         // included
                                                                         // okay!
                            }

                            else {
                                //
                                // shouldn't be here
                                //
                                break;
                            }
                        }

                        //
                        // if this line contains both '{' & '}'
                        //
                        else {
                            if (numberOfLeft == 0) {
                                temp.append(line.substring(currentLIndex + 1,
                                        currentRIndex));// i don't understand
                                                        // this
                                // maybe this is another exception, i don't
                                // know!
                                break;
                            } else {
                                temp.append(line + "\n");
                                line = reader.readLine();
                            }
                        }
                    } else {
                        line = reader.readLine();
                    }
                } else {
                    temp.append(line + "\n");
                    line = reader.readLine();
                }
            }
            System.out.println(temp);
            System.out.println("HERE IT ENDS!");
        } catch (Exception e) {
            System.out.println("File could not be read");
        }
        // got it this is a really long but simple algorithm to find out what is
        // between the two {} signs got it!
    }

}
